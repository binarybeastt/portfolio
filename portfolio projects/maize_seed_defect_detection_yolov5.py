# -*- coding: utf-8 -*-
"""maize seed defect detection yolov5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jnIo1bITWyaZzT_TGznGtp3QTgHKvm82
"""

import pandas as pd
import numpy as np
import os

import ast
import cv2

from sklearn.model_selection import train_test_split
import shutil
from tqdm.notebook import tqdm
import tqdm.notebook as tq

import albumentations as albu
from albumentations import Compose

import matplotlib.pyplot as plt

import torch
from IPython.display import Image, clear_output

clear_output()
print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

# Commented out IPython magic to ensure Python compatibility.
# clone repo
!git clone https://github.com/ultralytics/yolov5.git  

# change the working directory to yolov5
#%cd yolov5
os.chdir('/content/yolov5')

# install dependencies
# %pip install -qr requirements.txt 

# Change the working directory back to /kaggle/working/
os.chdir('/content')

!pwd

! pwd

os.chdir('/content/yolov5')
! pwd

# Create a new directory (this is happening inside the yolov5 directory)

base_dir = 'base_dir'
os.mkdir(base_dir)


# Now we create folders inside 'base_dir':

# base_dir

    # images
        # train
        # validation

    # labels
        # train
        # validation

# images
images = os.path.join(base_dir, 'images')
os.mkdir(images)

# labels
labels = os.path.join(base_dir, 'labels')
os.mkdir(labels)



# Inside each folder we create seperate folders for each class

# create new folders inside images
train = os.path.join(images, 'train')
os.mkdir(train)
validation = os.path.join(images, 'validation')
os.mkdir(validation)


# create new folders inside labels
train = os.path.join(labels, 'train')
os.mkdir(train)
validation = os.path.join(labels, 'validation')
os.mkdir(validation)

! ls

import os
import shutil

source_img_train = '/content/drive/MyDrive/training_data/images/train'
destination_img_train = '/content/yolov5/base_dir/images/train'

source_img_val = '/content/drive/MyDrive/training_data/images/val'
destination_img_val = '/content/yolov5/base_dir/images/validation'

source_label_train = '/content/drive/MyDrive/training_data/labels/train'
destination_label_train = '/content/yolov5/base_dir/labels/train'

source_label_val = '/content/drive/MyDrive/training_data/labels/val'
destination_label_val = '/content/yolov5/base_dir/labels/validation'

# gather all files
allfiles_img_train = os.listdir(source_img_train)
allfiles_img_val = os.listdir(source_img_val)
allfiles_label_train = os.listdir(source_label_train)
allfiles_label_val = os.listdir(source_label_val)

# iterate on all files to move them to destination folder
for f in allfiles_img_train:
	src_path_img_train = os.path.join(source_img_train, f)
	dst_path_imag_train = os.path.join(destination_img_train, f)
	shutil.copy(src_path_img_train, dst_path_imag_train)
 
for f in allfiles_img_val:
	src_path_img_val = os.path.join(source_img_val, f)
	dst_path_imag_val = os.path.join(destination_img_val, f)
	shutil.copy(src_path_img_val, dst_path_imag_val)
 
for f in allfiles_label_train:
	src_path_label_train = os.path.join(source_label_train, f)
	dst_path_label_train = os.path.join(destination_label_train, f)
	shutil.copy(src_path_label_train, dst_path_label_train)
 
for f in allfiles_label_val:
	src_path_label_val = os.path.join(source_label_val, f)
	dst_path_label_val = os.path.join(destination_label_val, f)
	shutil.copy(src_path_label_val, dst_path_label_val)

yaml_dict = {'train': 'base_dir/images/train',   # path to the train folder
            'val': 'base_dir/images/validation', # path to the val folder
            'nc': 4,                             # number of classes
            'names': ['Bad', 'Excellent', 'Good', 'Worse']}                # list of label names

# Create the yaml file called my_data.yaml
# We will save this file inside the yolov5 folder.

import yaml

with open(r'my_data.yaml', 'w') as file:
    documents = yaml.dump(yaml_dict, file)

os.listdir('/content/yolov5')

# Display the contents of the yaml file

! cat '/content/yolov5/my_data.yaml'

! pwd

!WANDB_MODE="dryrun" python train.py --img 640 --batch 16 --epochs 150 --freeze 10 --data my_data.yaml --weights yolov5s.pt

print(len(os.listdir('/content/yolov5/base_dir/images/train')))
print(len(os.listdir('/content/yolov5/base_dir/images/validation')))

os.listdir('runs/train/')

# get a list of experiments
exp_list = os.listdir('runs/train/')

# Get the latest exp.
# I found that the first item in the list is the latest experiment. Not
# the last item as one would normally expect.
exp = exp_list[0]

exp

# Display the contents of the "exp" folder
os.listdir(f'runs/train/{exp}')

# One mosaic batch of train images with labels

plt.figure(figsize = (15, 15))
plt.imshow(plt.imread(f'runs/train/{exp}/train_batch0.jpg'))

# One batch of val images with true labels

plt.figure(figsize = (15, 15))
plt.imshow(plt.imread(f'runs/train/{exp}/val_batch0_labels.jpg'))

# One batch of val images with predicted labels

plt.figure(figsize = (15, 15))
plt.imshow(plt.imread(f'runs/train/{exp}/val_batch0_pred.jpg'))

# Make a prediction on the test images

# Note if we had test images, the absolute path to the folder containing the
# test images can be set as follows:
# '/kaggle/input/global-wheat-detection/test'
# (note it's /kaggle/input/ and not /kaggle/working/)

# Adding --save-txt means that after prediction each image will have a txt file with bounding box info.
# https://github.com/ultralytics/yolov5/issues/388
# --save-conf means that we will also save the confidence scores for each bounding box.

# Here we are just making a prediction on images that are inside the 'images' folder.
# This is just a demo. Change the path to point to your test images.
# Note that we are using --save-txt and --save-conf because we want to save the 
# predicted bounding box coordinates and confidence scores.
!python detect.py --source '/content/Good (22).jpg' --weights 'runs/train/exp/weights/best.pt' --img 640 --visualize --save-txt --save-conf --exist-ok

# Make a prediction on the test images

# Note if we had test images, the absolute path to the folder containing the
# test images can be set as follows:
# '/kaggle/input/global-wheat-detection/test'
# (note it's /kaggle/input/ and not /kaggle/working/)

# Adding --save-txt means that after prediction each image will have a txt file with bounding box info.
# https://github.com/ultralytics/yolov5/issues/388
# --save-conf means that we will also save the confidence scores for each bounding box.

# Here we are just making a prediction on images that are inside the 'images' folder.
# This is just a demo. Change the path to point to your test images.
# Note that we are using --save-txt and --save-conf because we want to save the 
# predicted bounding box coordinates and confidence scores.
!python detect.py --source '/content/Worst (19).jpg' --weights 'runs/train/exp/weights/best.pt' --img 640 --visualize --save-txt --save-conf --exist-ok

!zip -r /content/detect.zip /content/yolov5/runs/detect
!zip -r /content/train.zip /content/yolov5/runs/train

from google.colab import files
files.download('/content/detect.zip')
files.download('/content/train.zip')

!python export.py --weights yolov5s.pt --include torchscript

files.download('/content/yolov5/yolov5s.pt')
files.download('/content/yolov5/yolov5s.torchscript.pt')
files.download('/content/yolov5/yolov5s.torchscript.pt1')

!zip -r /content/detect1.zip /content/yolov5/runs/detect
files.download('/content/detect1.zip')

files.download('/content/yolov5/yolov5s.torchscript.pt')

files.download('/content/yolov5/yolov5s.pt')

files.download('/content/yolov5/yolov5s.torchscript.pt1')

files.download('/content/detect1.zip')

os.chdir('/content')

!python convert.py

